knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
```
library(here)
library(tidyverse)
library(here)
here()
read_csv(here("data/gwl/stations.csv")
)
here()
read_csv(here("intro/data/gwl/stations.csv")
)
stations <- read_csv(here("intro/data/gwl/stations.csv"))
install.packages("readxl")
install.packages("readxl")
library(readxl)
ces <- read_xlsx(here("data/calenviroscreen/ces3results.xlsx"))
library(here)
ces <- read_xlsx(here("data/calenviroscreen/ces3results.xlsx"))
ces <- read_xlsx(here("intro/data/calenviroscreen/ces3results.xlsx"))
# by default, read_xlsx() only reads the first sheet in a file
metadata <- read_xlsx(here("intro/data/calenviroscreen/ces3results.xlsx"),
sheet = 2, skip = 6)
View(metadata)
# Read the index summary sheet and select the appropriate number of rows to skip
watershed <- read_xlsx(here("intro/data",
"healthy_watersheds",
"CA_PHWA_TabularResults_170518.xlsx"
))
# Read the index summary sheet and select the appropriate number of rows to skip
watershed <- read_xlsx(here("intro/data",
"healthy_watersheds",
"CA_PHWA_TabularResults_170518.xlsx"),
sheet = 2,
skip = 4)
library(sf)
sac_county <- st_read(here("intro/data/shp/sac/sac_county.shp"))
# plot
library(ggplot2)
ggplot(sac_county) + geom_sf()
ggplot(sac_county) + geom_sf() + theme_bw()
# create a directory to write data
dir.create(here("data_output"))
write_csv(stations,
here("data_output", "my_stations.csv"))
library(tidyverse)
write_csv(stations,
here("data_output", "my_stations.csv"))
# create a directory to write data
dir.create(here("intro/data_output"))
write_csv(stations,
here("intro/data_output", "my_stations.csv"))
# write a shapefile
st_write(sac_county, here("intro/data_output",
"sac_county.shp"))
bfast <- "yogurt parfait"
write_rds(bfast, here("intro/data_output/breakfast.rds"))
write_rds(bfast, here("intro/data_output/breakfast.rds"))
read_rds(here("intro/data_output/breakfast.rds"))
library(tidyverse)
library(here)
gwl <- read_csv(here("intro/data", "gwl", "gwl.csv"))
gwl <- read_csv(here("intro/data/gwl/gwl.csv"))
gwl <- read_csv(here("intro/data", "gwl", "gwl.csv"))
gwl <- read_csv(here("intro/data/gwl/gwl.csv"))
View(gwl)
# ggplot
ggplot(data=gwl) +
geom_line()
# ggplot
ggplot(data=gwl) +
geom_line(mapping=aes(x=MSMT_DATE, y=GSE_WISE))
# ggplot
ggplot(data=gwl) +
geom_line(mapping=aes(x=MSMT_DATE, y=GSE_WSE))
ggplot(data=gwl) +
geom_area(aes(MSMT_DATE, GSE_WSE))
# slightly more complex plot
ggplot(gwl) +
geom_point(aes(MSMT_DATE, GSE_WSE),
alpha=0.3) +
geom_line(aes(MSMT_DATE, GSE_WSE), color = "red")
# slightly more complex plot - order matters, Ggplot will build in layers
ggplot(gwl) +
geom_point(aes(MSMT_DATE, -GSE_WSE), # plots negative versions of the values
alpha=0.3) +
geom_line(aes(MSMT_DATE, -GSE_WSE), color = "red")
ggplot(gwl)+
geom_histogram(aes(GSE_WSE))
library(here)
library(tidyverse)
stations <- read_csv(here("intro/data/gwl/stations.csv"))
#filter
stations_sac <- dplyr::filter(stations, COUNTY_NAME == "Sacramento")
table(stations_sac$WELL_USE)
stations_sac <- filter(stations,
COUNTY_NAME == "Sacramento",
WELL_USE == "Residential")
sep_counties <- c("Sacramento", "Placer", "El Dorado")
stations_multcounties <- filter(stations, COUNTY_NAME %in% sep_counties)
# %in% operator detects mutliple matches. Looks for strings in column COUNTY_NAME that match strings in sep_counties
stations_multcounties <- filter(stations, COUNTY_NAME %in% sep_counties)
View(stations_sac)
View(stations_multcounties)
# exclude everything but yolo county
stations_trim <- filter(stations, !COUNTY_NAME == "Yolo")
# select
stations_sel1 <- select(stations, c(STN_ID, LATITUDE, LONGITUDE, COUNTY_NAME))
stations_sel2 <- select(stations, -c(LATITUDE:BASIN_NAME, WELL_USE))
# select by condiions, like starts_with or contains
stations_sel3 <- select(stations, starts_with("W"), contains("NAME"))
stations_multcounty <- stations %>%
filter(COUNTY_NAME %in% c("Sacramento", "Placer")) %>%
select(starts_with("W"), contains("NAME"), contains("ID")) %>%
rename(station_id = STN_ID)
View(stations_multcounty)
# modify data
stations_mutate1 <- stations %>%
mutate(WELL_DEPTH_m = WELL_DEPTH * 0.3048)
stations_mutate1 %>%
ggplot() +
geom_point(aes(x=STN_ID, y=WELL_DEPTH), color="darkblue", alpha=0.5) +
geom_point(aes(x=STN_ID, y=WELL_DEPTH_m), color="maroon", pch=21, alpha=0.8)
n_by_county <- stations %>%
group_by(COUNTY_NAME) %>%
count(sort=TRUE)
View(n_by_county)
n_by_county <- stations %>%
group_by(COUNTY_NAME) %>%
tally()
View(n_by_county)
n_by_county <- stations %>%
group_by(COUNTY_NAME) %>%
tally(sort=T)
n_by_county <- stations %>%
group_by(COUNTY_NAME) %>%
count(sort=T)
# arrange
stations %>%
group_by(COUNTY_NAME) %>%
count() %>%
arrange(desc(COUNTY_NAME)) # arrange the data by whatever variable of interest
# summarize and get the top 10 avg depth wells by county
stations %>%
group_by(COUNTY_NAME) %>%
summarize(mean_well_depth = mean(WELL_DEPTH, na.rm=TRUE)) %>%
arrange(desc(mean_well_depth)) %>% # gets the deepest
head(10) %>% # take top 10 records
ggplot() + geom_col(aes(x=COUNTY_NAME, y=mean_well_depth)) +
labs(title = "Mean well depth",
subtitle = "Top 10 Counties with deepest wells") +
coord_flip()
# let's now look at 10 groundwater stations
gwl_10 <- read_csv(here("intro/data/gwl/gwl_10.csv"))
# plot
ggplot(gwl_10) +
geom_point(aes(x = MSMT_DATE, y = GSE_WSE))
# how many stations are we lookin' at? - aside on data
# class and structure
length(unique(gwl_10$SITE_CODE))
class(gwl_10$SITE_CODE)
dim(gwl_10$SITE_CODE)
dim(gwl_10) # dataframes have a property dim
length(gwl_10) # length is number of columns in dataframe
table(gwl_10$SITE_CODE)
# use a color aesthetic
ggplot(gwl_10) +
geom_point(aes(x = MSMT_DATE,
y = GSE_WSE,
color = SITE_CODE),
alpha = 0.3)
# can also color by a continuous variable,
# like the total completed depth
ggplot(gwl_10) +
geom_point(aes(x = MSMT_DATE,
y = GSE_WSE,
color = WELL_DEPTH),
alpha = 0.3)
# hard to read x axis text because they're long
ggplot(data = gwl_10) +
geom_boxplot(aes(x = SITE_CODE, y = GSE_WSE))
# use a coord_flip()
ggplot(data = gwl_10) +
geom_boxplot(aes(x = SITE_CODE, y = GSE_WSE)) +
coord_flip()
# make more complex
range(gwl_10$MSMT_DATE) # range of the dates
ggplot(data = gwl_10) +
geom_boxplot(aes(y = SITE_CODE, x = GSE_WSE,
fill = WELL_USE)) +
labs(
y = "",
x = "Depth to groundwater (ft)",
fill = "Well type",
title = "Depth to groundwater at 10 sites",
subtitle = "Sacramento and Placer County (1961-present)",
caption = "Source: Periodic Groundwater level database, CA-DWR."
)
# facet makes subplots - make a subplot for each
# SITE_ID in the data
ggplot(gwl_10) +
geom_line(aes(MSMT_DATE, GSE_WSE, color = WELL_USE)) +
facet_wrap(~SITE_CODE) # don't forget tilde!
# save some plots
my_plot <- ggplot(gwl_10) +
geom_line(aes(MSMT_DATE, GSE_WSE, color = WELL_USE)) +
facet_wrap(~SITE_CODE) + # don't forget tilde!
scale_color_viridis_d()
my_plot
# save to pdf by creating device
pdf(here("data_output", "my_plot.pdf")) # open a PDF connection
my_plot # print to the plot to the PDF
# save to pdf by creating device
pdf(here("intro/data_output", "my_plot.pdf")) # open a PDF connection
my_plot # print to the plot to the PDF
dev.off() # close the connection, i.e., save plot
# save with ggsave - 1 step
ggsave(here("intro/data_output", "my_plot_ggsave.png"),
my_plot, width = 10, height = 7)
# get some data:
ces <- read_xlsx(here("data/calenviroscreen/ces3results.xlsx"))
# get some data:
ces <- read_xlsx(here("intro/data/calenviroscreen/ces3results.xlsx"))
library(tidyverse)
library(readxl)
library(here)
# get some data:
ces <- read_xlsx(here("intro/data/calenviroscreen/ces3results.xlsx"))
ces <- ces %>%  # convert incorrectly classed non numeric columns
mutate(across(c(`Ozone`:`Pop. Char. Pctl`), as.numeric))
library(janitor)
install.packages("janitor")
names(ces_janitor)
library(janitor)
ces_janitor <- ces %>% clean_names()
names(ces_janitor)
# PIVOTING
# from wide to long
ces_long <- pivot_longer(data = ces_clean,
# pivot on some columns
cols = c(`Ozone`:`Pop. Char. Pctl`),
names_to = "CES_variable",
# name of the column for pivoted values
values_to = "CES_values"
)
# get some data:
ces <- read_xlsx(here("intro/data/calenviroscreen/ces3results.xlsx"))
ces_clean <- ces %>%  # convert incorrectly classed non numeric columns
mutate(across(c(`Ozone`:`Pop. Char. Pctl`), as.numeric))
library(janitor)
ces_janitor <- ces %>% clean_names()
names(ces_janitor)
# PIVOTING
# from wide to long
ces_long <- pivot_longer(data = ces_clean,
# pivot on some columns
cols = c(`Ozone`:`Pop. Char. Pctl`),
names_to = "CES_variable",
# name of the column for pivoted values
values_to = "CES_values"
)
# plot data more easily in
ces_long %>% filter(`California County` %in% c("Sacramento", "Placer") ) %>%
ggplot() +
geom_col(aes(x=CES_variable, y=CES_values)) +
facet_wrap(~`California County`) +
coord_flip()
library(sf)
sac <- st_read(here("intro/data/shp/sac/sac_county.shp"), quiet=TRUE)
plot(sac)
plot(sac[1])
#  what about a csv with lat/lon
# groundwater level station data in Sac county
stations <- read_csv(here("data/gwl/stations_sac.csv"))
#  what about a csv with lat/lon
# groundwater level station data in Sac county
stations <- read_csv(here("intro/data/gwl/stations_sac.csv"))
# convert the simple dataframe to a sf dataframe
# functions in sf almost all start with "st_"
stations <- st_as_sf(stations,
coords = c("LONGITUDE", "LATITUDE"), # X goes first
crs = 4269, # projections
remove = FALSE)
# check projection:
st_crs(sac)$epsg
st_crs(stations)$epsg
# transform data to match EPSG (projections)
sac <- st_transform(sac, crs = st_crs(stations))
# check they are the same:
identical(st_crs(stations), st_crs(sac))
# Mapview
library(mapview)
mapview(sac) # plot interactive map
mapview(sac) + mapview(stations)
install.packages("ggspatial")
# answer just question 1
library(here)
library(tidyverse)
library(sf)
library(mapview)
# read in groundwater level measurements, stations, perforations, and
# CES data pre-joined
gwl <- read_rds(here("data/sacramento_gw_data_w_calenviro.rds"))
# read in groundwater level measurements, stations, perforations, and
# CES data pre-joined
gwl <- read_rds(here("intro/data/sacramento_gw_data_w_calenviro.rds"))
# Sacramento county spatial data
sac <- st_read(here("intro/data/shp/sac/sac_county.shp")) %>%
st_transform(st_crs(gwl))
# answer just question 1
library(here)
library(tidyverse)
library(sf)
library(mapview)
# read in groundwater level measurements, stations, perforations, and
# CES data pre-joined
gwl <- read_rds(here("intro/data/sacramento_gw_data_w_calenviro.rds"))
# What well uses are most common? and where are they located?
gwl %>% # pipe takes everything to the left of the pipe (gwl)
count(WELL_USE, sort = TRUE) # and inserts it as first arguemnt of next function
# pipe above is the same as:
count(gwl, WELL_USE, sort = TRUE)
# visualize well counts with a plot and clean up the plot
p1 <- gwl %>%
count(WELL_USE, sort = TRUE) %>%
# remove NA well uses
filter(!is.na(WELL_USE)) %>%
ggplot(aes(fct_reorder(WELL_USE, n), n)) +
geom_col(aes(fill = WELL_USE)) +
coord_flip() +
guides(fill = "none") +
labs(title = "Monitoring well use", x = "", y = "Count")
# converting groundwater levels to sf object
gwl <- st_as_sf(gwl,
coords = c("LONGITUDE", "LATITUDE"),
crs = 4269,
remove = FALSE)
# Sacramento county spatial data
sac <- st_read(here("intro/data/shp/sac/sac_county.shp")) %>%
st_transform(st_crs(gwl))
# plot of groundwater stations
gwl_stations <- gwl %>%
filter(is.na(WELL_USE)) %>%
group_by(SITE_CODE) %>%
slice(1) # pull the first observation
plot(gwl_stations)
rversion
R.version
