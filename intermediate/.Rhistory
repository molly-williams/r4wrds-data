pkgs <- c("readr", "cowsay", "here", "tidyverse", "glue")
purrr::walk(pkgs, require, character.only = TRUE)
# silently source all functions using the purrr::walk function
fns <- fs::dir_ls(here("scripts/functions"))
walk(fns, ~source(.x))
fns
# define the url where quotes are located
# get pieces to make link
repo <- "JakubPetriska/060958fd744ca34f099e947cd080b540"
csv <- "raw/963b5a9355f04741239407320ac973a6096cd7b6/quotes.csv"
url <- glue("https://gist.githubusercontent.com/{repo}/{csv}")
# use all of our functions
f_read_data(url) %>%
f_preprocess_data() %>%
f_inspire_me()
# list packages in a vector and load them all
pkgs <- c("readr", "cowsay")
purrr::walk(pkgs, require, character.only = TRUE)
# read quotes from a url
f_read_data <- function(url){
suppressMessages(
quotes  <- read_csv(url)
)
return(quotes)
}
# paste the quote to the author
f_preprocess_data <- function(d){
d$full_quote  <- paste0(d$Quote, " -", d$Author)
return(d)
}
# print a random animal and a random quote
f_inspire_me <- function(d){
animals <- names(animals)
say(sample(d$full_quote, 1), by = sample(animals, 1))
}
# use all of our functions
f_read_data(url) %>%
f_preprocess_data() %>%
f_inspire_me()
library(tidygeocoder)
install.packages("tidygeocoder")
library(tidygeocoder) # geocode our addresses
library(tidyverse)    # wrangle data
library(janitor)      # clean column names
library(glue)         # modern paste() function
library(sf)           # make spatial data
library(mapview)      # interactive maps!
mapviewOptions(fgb = FALSE)
# the url for the Form data
form_data <- paste0("https://docs.google.com/spreadsheets/d/e/",
"2PACX-1vSODxBm_z5Gu8a42C6ZFEa3S5iTbYV-",
"qucCGvasGS6c0qFUAml5vSMEgbvI9PYo1HJ20Y_WY62aTAb-",
"/pub?gid=1462593645&single=true&output=csv")
# read in url and clean
dat <- read_csv(form_data) %>% # takes the URL above and reads it in
janitor::clean_names() %>% # comes from janitor package
dplyr::rename( dining_name = 3, dining_address = 4)
View(dat)
# geocode using Open Street Map (osm) API because it's free
dat_geo <- dat %>%
geocode(dining_address, method = 'osm', lat = latitude , long = longitude)
# make into sf object so we can map
dat_geo <- dat_geo %>%
filter(!is.na(latitude) & !is.na(longitude)) %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326, remove = FALSE)
# geocode using Open Street Map (osm) API because it's free
dat_geo <- dat %>%
geocode(dining_address, method = 'osm', lat = latitude , long = longitude) # looks up the address, returns lat and long, creating new columns for latitude and longitude
# make into sf object so we can map
dat_geo <- dat_geo %>%
filter(!is.na(latitude) & !is.na(longitude)) %>% # remove NAs
st_as_sf(coords = c("longitude", "latitude"), crs = 4326, remove = FALSE)
# make into sf object so we can map
dat_geo <- dat_geo %>%
filter(!is.na(latitude) & !is.na(longitude)) %>% # remove NAs
st_as_sf(coords = c("longitude", "latitude"),
crs = 4326, # spatial projection
remove = FALSE) # keep lat/lon columns
View(dat_geo)
# map!
mapview(
dat_geo,
zcol = "comfort_using_r",
layer.name = "R comfort level",
cex = 6.5
)
library(leafpm)
install.packages("leafpm")
library(leafpm)
library(leaflet)
library(leaflet.extras)
install.packages("leaflet.extras")
library(htmltools)
library(leaflet.extras)
m <- leaflet()
m
# set up our map
m <- leaflet() %>% #call the blank map
# add tiles or the "basemaps"
addTiles(group = "OSM") %>% # defaults to Open Street Maps
addProviderTiles(providers$CartoDB.Positron, group = "Positron") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
addCircleMarkers(
lng = -121.4944, lat = 38.5816, fillColor = "red", color = "black",
popup = "Sacramento!", group = "Home",
) %>%
addCircleMarkers(
data = dat_geo, group = "Food & Drink",
label = ~htmlEscape(first_name),
popup = glue(
"<b>Name:</b> {dat_geo$first_name}<br>
<b>Food_Name:</b> {dat_geo$dining_name}<br>
<b>Food_Address:</b> {dat_geo$dining_address}<br>
<b>R comfort (1-10):</b> {dat_geo$comfort_using_r}"
)
)  %>%
addLayersControl(
baseGroups = c("Toner Lite", "Positron", "OSM"),
overlayGroups = c("Home", "Food & Drink"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addMeasure()
m  # Print the map
# Libraries
library(igraph)
# Libraries
install.packages("igraph")
install.packages("networkD3")
library(igraph)
library(networkD3)
# create a dataset:
data <- tibble(
from = c(
"Dam","Dam","Dam", "Dam",
"River","River","River", "River","River",
"Canal", "Canal",
"Diversion","Diversion",
"Reservoir", "Reservoir","Reservoir",
"Lake","Lake","Lake", "Lake",
"Road","Road","Road",
"Culvert", "Culvert",
"Fish", "Fish","Fish",
"Frog","Frog","Frog",
"MacroInvertebrates","MacroInvertebrates"
),
to = c(
"River","Reservoir","Canal","Diversion",
"Lake","Reservoir","Frog","Fish","MacroInvertebrates",
"Diversion", "Reservoir",
"Dam", "River",
"River","Dam","Fish",
"Fish","Dam","Frog","MacroInvertebrates",
"Fish","Dam", "Canal",
"Road", "Dam",
"Frog", "River","MacroInvertebrates",
"Fish", "River", "Lake",
"River", "Lake"
)
)
# Plot
(p <- simpleNetwork(data, height = "600px", width = "600px",
fontSize = 16, fontFamily = "serif",
nodeColour = "darkblue", linkColour = "steelblue",
opacity = 0.9, zoom = FALSE, charge = -500))
ces3_sac <- readRDS(here::here("data/ces3_sac.rds"))
mapview(ces3_sac, zcol = "CIscoreP")
# plot of Groundwater threats vs. CES score
(ces_plot <- ces3_sac %>%
ggplot(aes(x = gwthreatsP, y = CIscoreP, label = tract)) +
geom_point() +
geom_smooth(method = "gam") +
cowplot::theme_half_open(font_size = 12) +
labs(
title = "CES Score vs. Groundwater Threats in Sacramento County",
subtitle = "Higher CI Score indicates higher threat/impact",
x = "Groundwater Threats (percentile)",
y = "CI Score (percentile)"
)
)
# plot of Groundwater threats vs. CES score
(ces_plot <- ces3_sac %>%
ggplot(aes(x = gwthreatsP, y = CIscoreP, label = tract)) +
geom_point() +
geom_smooth(method = "gam") +
cowplot::theme_half_open(font_size = 12) +
labs(
title = "CES Score vs. Groundwater Threats in Sacramento County",
subtitle = "Higher CI Score indicates higher threat/impact",
x = "Groundwater Threats (percentile)",
y = "CI Score (percentile)"
)
)
# Load CES data for Sac county
install.packages("cowplot")
library(cowplot)
# plot of Groundwater threats vs. CES score
(ces_plot <- ces3_sac %>%
ggplot(aes(x = gwthreatsP, y = CIscoreP, label = tract)) +
geom_point() +
geom_smooth(method = "gam") +
cowplot::theme_half_open(font_size = 12) +
labs(
title = "CES Score vs. Groundwater Threats in Sacramento County",
subtitle = "Higher CI Score indicates higher threat/impact",
x = "Groundwater Threats (percentile)",
y = "CI Score (percentile)"
)
)
plotly(ces_plot)
# Interactive plotly
library(plotly)
# Interactive plotly
install.packages("plotly")
library(plotly)
plotly(ces_plot)
ggplotly(ces_plot)
# list all files we want to read in
files_in <- fs::dir_ls(here("data/gwl/county/"))
# initalize a list of defined length
l <- vector("list", length = length(files_in))
class(l)
# use double bracket notation to access list elements by index
l[[1]]
l[[2]]
seq_along(l)
# loop over all files in files_in, and read them into each element of the list
for(i in seq_along(l)) { # l is object we're going to read them into , could also be 1:3 but this is more consistent
l[[i]] <- read_csv(files_in[i])
}
View(l)
# use double bracket notation to access list elements by index
l[[1]]
cat("We are on index:", index, "of the loop!\n")
cat()
?cat
#silly loop
for(index in 1:1000){
cat("We are on index:", index, "of the loop!\n")
}
cat("We are on index:", index, "of the loop!")
#silly loop
for(index in 1:1000){
cat("We are on index:", index, "of the loop!")
}
cat("We are on index:", index, "of the loop!\n")
#silly loop
for(index in 1:1000){
cat("We are on index:", index, "of the loop!\n")
}
cat("We are on index:", index, "of the loop!\n")
# loop over all files in files_in, and read them into each element of the list
for(i in seq_along(l)) { # l is object we're going to read them into , could also be 1:3 but this is more consistent
l[[i]] <- read_csv(files_in[i])
cat("\nComplete.\n\n")
}
my_list <- list(a = 1:3, b = data.frame(x=1, y=2), c="apples")
# combine all list elements into a single dataframe
ldf <- bind_rows(l)
View(ldf)
# split into another list by a column
ldf <- split(ldf, ldf$SITE_CODE)
length(ldf)
# loop over each list element and write a csv file
fs::dir_create(here("data/gwl/site_code"))
names(ldf)
# create a vector of filenames to write out
files_out <- glue::glue("{here('data/gwl/site_code', names(ldf))}.csv")
i = 1
ldf[[i]]
seq_along(ldf)
# how we can write each split dataframe of ldf as a separate csv file
for(i in seq_along(ldf)){
write_csv(ldf[[i]], files_out[i])
}
l <- lapply(files_in, read_csv) # same as the for loop above!
l[[4]]
l[[3]]
ldf <- bind_rows(l) #stitches data frames into one
ldf <- split(ldf, ldf$SITE_CODE) # split by site code; there are 723 unique values of site code
length(ldf)
files_out
mapply(function(x, y) write_csv(x,y), ldf, files_out) # list objects to send through the factory, name the function within mapply
my_function <- function(x, y) {
write_csv(x, y)
}
mapply(my_function, ldf, files_out)
l <- map(files_in, ~read_csv(.x))
ldf <- bind_rows(l)
nrow(ldf)
length(ldf)
ldf <- group_split(ldf, SITE_CODE) # like split, but doesn't name the list
names(ldf)
walk2(ldf, files_out) # like map, but silent; from purrr
walk2(ldf, files_out, ~write_csv(.x, .y)) # like map, but silent; from purrr
library(tidyverse)
source(here("scripts/functions/f_import_clean_export.R"))
library(here)
library(purrr)
source(here("scripts/functions/f_import_clean_export.R"))
source(here("scripts/functions/f_import_clean_export.R"))
# create a directory to store the results
fs::dir_create(here("results"))
files_in <- fs::dir_ls(here("data/gwl/county/"))
basename(files_in)
files_out <- here("results", str_replace_all(basename(files_in), ".csv", ".shp"))
walk2(files_in, files_out, ~f_import_clean_export(.x, .y))
library(here) # path management
library(tidyverse) # data wrangling & viz
library(purrr) # iteration
library(janitor) # name cleaning
library(glue) # pasting stuff together
library(here) # file paths
# SPATIAL PACKAGES
library(sf) # analysis tools
library(mapview)  # interactive maps!
mapviewOptions(fgb = FALSE) # to save interactive maps
# devtools::install_github("UrbanInstitute/urbnmapr")
library(urbnmapr) # county & state boundaries
# devtools::install_github("UrbanInstitute/urbnmapr")
install.packages("urbn.mapr")
# devtools::install_github("UrbanInstitute/urbnmapr")
install.packages("urbnmapr")
install.packages("urbnmapr")
install.packages("units")
library(units) # for convert spatial and other units
install.packages("dataRetrieval")
# devtools::install_github("UrbanInstitute/urbnmapr")
library(urbnmapr) # county & state boundaries
library(units) # for convert spatial and other units
library(dataRetrieval) # download USGS river data
library(tmap) # mapping
library(tmaptools) # mapping tools
# SPATIAL PACKAGES
library(sf) # analysis tools
library(mapview)  # interactive maps!
mapviewOptions(fgb = FALSE) # to save interactive maps
# devtools::install_github("UrbanInstitute/urbnmapr")
library(urbnmapr) # county & state boundaries
library(units) # for convert spatial and other units
library(dataRetrieval) # download USGS river data
library(tmap) # mapping
library(tmaptools) # mapping tools
devtools::install_github("UrbanInstitute/urbnmapr")
library(devtools)
install.packages("devtools")
library(devtools)
devtools::install_github("UrbanInstitute/urbnmapr")
# get CA
ca <- urbnmapr::get_urbn_map(map="states", sf=TRUE) %>%
filter(state_abbv == "CA")
# get CA county boundary
ca_co <- urbnmapr::get_urbn_map(map = "counties", sf=TRUE) %>%
filter(state_abbv == "CA")
mapview(ca)
# get CA
ca <- urbnmapr::get_urbn_map(map="states", sf=TRUE) %>%
filter(state_abbv == "CA")
# get CA county boundary
ca_co <- urbnmapr::get_urbn_map(map = "counties", sf=TRUE) %>%
filter(state_abbv == "CA")
-mapview(ca)
mapview(ca)
library(urbnmapr) # county & state boundaries
# get CA
ca <- urbnmapr::get_urbn_map(map="states", sf=TRUE) %>%
filter(state_abbv == "CA")
# get CA
ca <- urbnmapr::get_urbn_map(map="states", sf=TRUE) %>%
filter(state_abbv == "CA")
# SPATIAL PACKAGES
library(sf) # analysis tools
library(mapview)  # interactive maps!
mapviewOptions(fgb = FALSE) # to save interactive maps
library(urbnmapr) # county & state boundaries
library(units) # for convert spatial and other units
library(dataRetrieval) # download USGS river data
library(tmap) # mapping
library(tmaptools) # mapping tools
install.packages("tmap")
install.packages("tmaptools")
library(tmap) # mapping
library(tmaptools) # mapping tools
# get CA
ca <- urbnmapr::get_urbn_map(map="states", sf=TRUE) %>%
filter(state_abbv == "CA")
# get CA county boundary
ca_co <- urbnmapr::get_urbn_map(map = "counties", sf=TRUE) %>%
filter(state_abbv == "CA")
mapview(ca)
library(here) # path management
library(tidyverse) # data wrangling & viz
library(purrr) # iteration
library(janitor) # name cleaning
library(glue) # pasting stuff together
library(here) # file paths
# SPATIAL PACKAGES
library(sf) # analysis tools
library(mapview)  # interactive maps!
mapviewOptions(fgb = FALSE) # to save interactive maps
library(urbnmapr) # county & state boundaries
library(units) # for convert spatial and other units
library(dataRetrieval) # download USGS river data
library(tmap) # mapping
library(tmaptools) # mapping tools
# get CA
ca <- urbnmapr::get_urbn_map(map="states", sf=TRUE) %>%
filter(state_abbv == "CA")
# get CA county boundary
ca_co <- urbnmapr::get_urbn_map(map = "counties", sf=TRUE) %>%
filter(state_abbv == "CA")
mapview(ca)
# shapefile
sac_co <- sf::st_read(here("data/shp/sac/sac_county/shp"))
# shapefile
sac_co <- sf::st_read(here("data/shp/sac/sac_county.shp"))
# check CRS
st_crs(sac_co)$epsg
# check CRS
st_crs(sac_co)$epsg
# match with other data
sac_co <- st_transform(sac_co, st_crs(ca_co))
st_crs(sac_co) == st_crs(ca_co) # should be TRUE!
# make a box around sacramento county
# (a grid with an n=1) for inset
sac_box <- st_make_grid(sac_co, n = 1)
# make sure we have all the pieces with a quick test plot
plot(ca$geometry, col = alpha("gray", 0.5), border = "black", lwd=2)
plot(ca_co$geometry, add = T, border = "purple", col = NA)
plot(sac_co$geometry, add = T, border = "cyan4", col = "skyblue",alpha=0.4, lwd = 2)
plot(sac_box, add = T, border = "orange", col = NA, lwd = 1.4)
sac_grid_10 <- st_make_grid(sac_co, n=10)
plot(sac_grid_10)
mapview(sac_box) + mapview(sac_grid_10)
sac_grid_10 <- st_make_grid(sac_co, n=10, square=FALSE)
mapview(sac_box) + mapview(sac_grid_10)
mapview(sac_box)
mapview(sac_box) + mapview(sac_grid_10) + mapview(sac_co, color="orange", lwd=2)
mapview(sac_box) + mapview(sac_grid_10) + mapview(sac_co, color="orange", lwd=4)
mapview(sac_box) + mapview(sac_grid_10) + mapview(sac_co, color="orange", lwd=2)
mapview(sac_box) + mapview(sac_grid_10) + mapview(sac_co, color="orange", lwd=2 #line width
)
plot(ca_co$geometry)
# make sure we have all the pieces with a quick test plot
plot(ca$geometry, col = alpha("gray", 0.5), border = "black", lwd=2)
# add layers, use add=TRUE
plot(ca_co$geometry, add = T, border = "purple", col = NA)
plot(sac_co$geometry, add = T, border = "cyan4", col = "skyblue",alpha=0.4, lwd = 2)
map(c(ca_co, ca, sac_co), ~st_crs()$epsg)
map(c(ca_co, ca, sac_co), ~st_crs(.x)$epsg)
map(list(ca_co, ca, sac_co), ~st_crs(.x)$epsg)
# make sure we have all the pieces with a quick test plot
plot(ca$geometry, col = alpha("gray", 0.5), border = "black", lwd=2)
# add layers, use add=TRUE
plot(ca_co$geometry, add = T, border = "purple", col = NA)
plot(sac_co$geometry, add = T, border = "cyan4", col = "skyblue",alpha=0.4, lwd = 2)
plot(sac_box, add = T, border = "orange", col = NA, lwd = 1.4)
plot(sac_box, add = T, border = "orange", col = NA, lwd = 1.4) plot(sac_grid_10, add=T, border="green", col=NA, lwd=0.5)
plot(sac_grid_10, add=T, border="green", col=NA, lwd=0.5)
# read the stations
gw_files <- list.files(path = here("data/gwl/county"),
full.names = TRUE, pattern = "*.csv")
# read all files into dataframes and combine with purrr
gw_df <- map_df(gw_files, ~read.csv(.x))
# the readr package will also do this same thing by default
# when passed a list of files with the same data types
gw_df <- read_csv(gw_files)
# now make "spatial" as sf objects
gw_df <- st_as_sf(gw_df, coords=c("LONGITUDE","LATITUDE"),
crs=4326, remove=FALSE) %>%
# and transform!
st_transform(., st_crs(ca_co))
# preview!
mapview(gw_df, zcol="COUNTY_NAME", layer.name="GW Stations") +
mapview(sac_co, legend=FALSE)
# now make "spatial" as sf objects
gw_df <- st_as_sf(gw_df, coords=c("LONGITUDE","LATITUDE"),
crs=4326, remove=FALSE) %>%
st_transform(., st_crs(ca_co)) # transform to match ca_co
# preview!
mapview(gw_df, zcol="COUNTY_NAME", layer.name="GW Stations") +
mapview(sac_co, legend=FALSE)
class(gw_df)
gw_sac <- gw_df %>%
filter(COUNTY_NAME == "Sacramento")
table(gw_sac$WELL_USE)
mapview(gw_sac, zcol="WELL_USE", layer.name="Well Use")
# basic subsetting
gw_df[1, ] # 1st row, all columns
gw_sac_join1 <- gw_df[sac_co, ] # all columns that intersect with the sac_co row
View(gw_df)
View(gw_sac_join1)
gw_sac_join2 <- st_join(gw_df, sac_co, left=FALSE)
gw_sac_join2 <- st_join(gw_df, sac_co, left=FALSE)
sac_loi <- gw_sac %>% filter(STN_ID %in% c("52418", "5605"))
mapview(sac_co, alpha.regions=0,
color="black", lwd=3, legend=FALSE) +
mapview(sac_loi, col.regions="purple",layer.name="Locations of Interest")
install.packages("dataRetrieval")
library(dataRetrieval)
install.packages("dataRetrieval")
install.packages("dataRetrieval")
# now we can go get flowline data!
us_nwis <- map(sac_loi$geometry,
~findNLDI(location = .x,
nav  = c("UM"),
find = c("nwis", "flowlines"),
distance_km = 120)
)
# we can split these data into separate data frame
# and add them as objects to the .Global environment.
# first add names based on our station IDs:
us_nwis <- set_names(us_nwis, nm=glue("id_{sac_loi$STN_ID}"))
